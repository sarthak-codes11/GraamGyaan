import React, { useState, useEffect } from "react";
import { useRouter } from "next/router";
import Link from "next/link";
import { useBoundStore } from "~/hooks/useBoundStore";
import { LeftBar } from "~/components/LeftBar";
import RightBar from "~/components/RightBar";

interface QuizQuestion {
  id: string;
  question: string;
  options: string[];
  correctAnswer: number;
  explanation: string;
}

interface Quiz {
  id: string;
  title: string;
  description: string;
  unitNumber: number;
  questions: QuizQuestion[];
  createdAt: string;
  isActive: boolean;
}

export default function DailyQuiz() {
  const router = useRouter();
  const isHindi = router.pathname.startsWith("/hindi");
  const isTelugu = router.pathname.startsWith("/telugu");
  
  const [availableQuizzes, setAvailableQuizzes] = useState<Quiz[]>([]);
  const [selectedQuiz, setSelectedQuiz] = useState<Quiz | null>(null);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [selectedAnswers, setSelectedAnswers] = useState<(number | undefined)[]>([]);
  const [showResults, setShowResults] = useState(false);
  const [quizStarted, setQuizStarted] = useState(false);
  const [loading, setLoading] = useState(true);
  
  const increaseXp = useBoundStore((x) => x.increaseXp);
  
  // Translation helper
  const t = (en: string, hi: string, te: string) => {
    if (isHindi) return hi;
    if (isTelugu) return te;
    return en;
  };

  // Fetch available quizzes
  useEffect(() => {
    const fetchQuizzes = async () => {
      try {
        console.log('Fetching quizzes from /api/quizzes...'); // Debug log
        const res = await fetch('/api/quizzes');
        console.log('Response status:', res.status); // Debug log
        const data = await res.json();
        console.log('Raw API response:', data); // Debug log
        
        if (data?.quizzes) {
          console.log('Total quizzes found:', data.quizzes.length); // Debug log
          console.log('All quizzes:', data.quizzes); // Debug log
          
          // Filter only active quizzes
          const activeQuizzes = data.quizzes.filter((quiz: Quiz) => {
            console.log(`Quiz "${quiz.title}" - isActive: ${quiz.isActive}`); // Debug log
            return quiz.isActive;
          });
          console.log('Active quizzes count:', activeQuizzes.length); // Debug log
          console.log('Active quizzes:', activeQuizzes); // Debug log
          setAvailableQuizzes(activeQuizzes);
        } else {
          console.log('No quizzes property in response or data is null'); // Debug log
          setAvailableQuizzes([]);
        }
      } catch (error) {
        console.error('Failed to fetch quizzes:', error);
        setAvailableQuizzes([]);
      } finally {
        setLoading(false);
      }
    };

    fetchQuizzes();
  }, []);

  const handleStartQuiz = () => {
    if (selectedQuiz) {
      setQuizStarted(true);
      setCurrentQuestionIndex(0);
      setSelectedAnswers(new Array(selectedQuiz.questions.length).fill(-1));
      setShowResults(false);
    }
  };

  const handleAnswerSelect = (answerIndex: number) => {
    const newAnswers = [...selectedAnswers];
    newAnswers[currentQuestionIndex] = answerIndex;
    setSelectedAnswers(newAnswers);
  };

  const handleNextQuestion = () => {
    if (!selectedQuiz) return; // Early return if no quiz selected
    
    if (currentQuestionIndex < selectedQuiz.questions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
    } else {
      // Quiz completed
      setShowResults(true);
      
      // Calculate score and award XP
      const correctAnswers = selectedAnswers.filter((answer, index) => 
        selectedQuiz.questions[index] && answer === selectedQuiz.questions[index].correctAnswer
      ).length;
      
      const xpReward = correctAnswers * 10; // 10 XP per correct answer
      if (xpReward > 0) {
        increaseXp(xpReward);
      }
    }
  };

  const handlePreviousQuestion = () => {
    if (currentQuestionIndex > 0) {
      setCurrentQuestionIndex(currentQuestionIndex - 1);
    }
  };

  const resetQuiz = () => {
    setQuizStarted(false);
    setCurrentQuestionIndex(0);
    setSelectedAnswers([]);
    setShowResults(false);
  };

  if (loading) {
    return (
      <div className="flex min-h-screen bg-gray-50">
        <LeftBar selectedTab={null} />
        <main className="flex-1 p-6 md:ml-64">
          <div className="max-w-4xl mx-auto text-center py-16">
            <div className="text-6xl mb-4">‚è≥</div>
            <h1 className="text-2xl font-bold text-gray-800">
              {t("Loading Quiz...", "‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...", "‡∞ï‡±ç‡∞µ‡∞ø‡∞ú‡±ç ‡∞≤‡±ã‡∞°‡±ç ‡∞Ö‡∞µ‡±Å‡∞§‡±ã‡∞Ç‡∞¶‡∞ø...")}
            </h1>
          </div>
        </main>
        <RightBar />
      </div>
    );
  }

  if (availableQuizzes.length === 0) {
    return (
      <div className="flex min-h-screen bg-gray-50">
        <LeftBar selectedTab={null} />
        <main className="flex-1 p-6 md:ml-64">
          <div className="max-w-4xl mx-auto text-center py-16">
            <div className="text-8xl mb-6">üìù</div>
            <h1 className="text-3xl font-bold text-gray-800 mb-4">
              {t("No Quiz Available", "‡§ï‡•ã‡§à ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç", "‡∞é‡∞≤‡∞æ‡∞Ç‡∞ü‡∞ø ‡∞ï‡±ç‡∞µ‡∞ø‡∞ú‡±ç ‡∞Ö‡∞Ç‡∞¶‡±Å‡∞¨‡∞æ‡∞ü‡±Å‡∞≤‡±ã ‡∞≤‡±á‡∞¶‡±Å")}
            </h1>
            <p className="text-gray-600 mb-6">
              {t(
                "Your teacher hasn't created any quizzes yet. Check back later!",
                "‡§Ü‡§™‡§ï‡•á ‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï ‡§®‡•á ‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§ï‡•ã‡§à ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§®‡§π‡•Ä‡§Ç ‡§¨‡§®‡§æ‡§Ø‡§æ ‡§π‡•à‡•§ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§µ‡§æ‡§™‡§∏ ‡§Ü‡§è‡§Ç!",
                "‡∞Æ‡±Ä ‡∞ü‡±Ä‡∞ö‡∞∞‡±ç ‡∞á‡∞Ç‡∞ï‡∞æ ‡∞é‡∞≤‡∞æ‡∞Ç‡∞ü‡∞ø ‡∞ï‡±ç‡∞µ‡∞ø‡∞ú‡±ç ‡∞∏‡±É‡∞∑‡±ç‡∞ü‡∞ø‡∞Ç‡∞ö‡∞≤‡±á‡∞¶‡±Å. ‡∞§‡∞∞‡±ç‡∞µ‡∞æ‡∞§ ‡∞§‡∞ø‡∞∞‡∞ø‡∞ó‡∞ø ‡∞ö‡±Ç‡∞°‡∞Ç‡∞°‡∞ø!"
              )}
            </p>
            <div className="flex gap-4 justify-center">
              <button
                onClick={() => window.location.reload()}
                className="inline-flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors"
              >
                üîÑ {t("Refresh", "‡§∞‡•Ä‡§´‡•ç‡§∞‡•á‡§∂ ‡§ï‡§∞‡•á‡§Ç", "‡∞∞‡∞ø‡∞´‡±ç‡∞∞‡±Ü‡∞∑‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø")}
              </button>
              <Link
                href={isHindi ? "/hindi" : isTelugu ? "/telugu" : "/learn"}
                className="inline-flex items-center px-6 py-3 bg-[#654321] text-white rounded-lg font-medium hover:bg-[#543619] transition-colors"
              >
                {t("Back to Learning", "‡§∏‡•Ä‡§ñ‡§®‡•á ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Ç", "‡∞®‡±á‡∞∞‡±ç‡∞ö‡±Å‡∞ï‡±ã‡∞µ‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞§‡∞ø‡∞∞‡∞ø‡∞ó‡∞ø ‡∞µ‡±Ü‡∞≥‡±ç‡∞≥‡∞Ç‡∞°‡∞ø")}
              </Link>
            </div>
            
            {/* Debug info for development */}
            <div className="mt-8 p-4 bg-gray-100 rounded-lg text-left text-sm">
              <p><strong>Debug Info:</strong></p>
              <p>Loading: {loading.toString()}</p>
              <p>Available Quizzes: {availableQuizzes.length}</p>
              <p>Check browser console for detailed logs</p>
              <button
                onClick={async () => {
                  try {
                    const res = await fetch('/api/quizzes');
                    const data = await res.json();
                    alert(`API Response: ${JSON.stringify(data, null, 2)}`);
                  } catch (error) {
                    alert(`API Error: ${error}`);
                  }
                }}
                className="mt-2 px-4 py-2 bg-yellow-500 text-white rounded"
              >
                Test API Directly
              </button>
            </div>
          </div>
        </main>
        <RightBar />
      </div>
    );
  }

  return (
    <>
      {/* Animated Background */}
      <style jsx global>{`
        @keyframes gradientShift {
          0% { background-position: 0% 50%; }
          50% { background-position: 100% 50%; }
          100% { background-position: 0% 50%; }
        }
        .animate-gradient {
          background: linear-gradient(270deg, #654321, #8B5A2B, #A0522D, #CD853F);
          background-size: 400% 400%;
          animation: gradientShift 15s ease infinite;
        }
      `}</style>
      <div className="pointer-events-none fixed inset-0 -z-50 animate-gradient opacity-20" />
      
      <div className="flex min-h-screen bg-gradient-to-br from-white via-orange-50 to-amber-50">
        <LeftBar selectedTab={null} />
        
        <main className="flex-1 p-6 md:ml-64">
        <div className="max-w-4xl mx-auto">
          {/* Header */}
          <div className="mb-8">
            <div className="flex items-center gap-4 mb-4">
              <Link
                href={isHindi ? "/hindi" : isTelugu ? "/telugu" : "/learn"}
                className="text-blue-600 hover:text-blue-800 font-medium"
              >
                ‚Üê {t("Back to Learning", "‡§∏‡•Ä‡§ñ‡§®‡•á ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Ç", "‡∞®‡±á‡∞∞‡±ç‡∞ö‡±Å‡∞ï‡±ã‡∞µ‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞§‡∞ø‡∞∞‡∞ø‡∞ó‡∞ø ‡∞µ‡±Ü‡∞≥‡±ç‡∞≥‡∞Ç‡∞°‡∞ø")}
              </Link>
            </div>
            
            <h1 className="text-4xl font-bold text-[#654321] mb-2">
              {t("Daily Quiz", "‡§¶‡•à‡§®‡§ø‡§ï ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º", "‡∞¶‡±à‡∞®‡∞Ç‡∞¶‡∞ø‡∞® ‡∞ï‡±ç‡∞µ‡∞ø‡∞ú‡±ç")} üß†
            </h1>
            <p className="text-gray-600">
              {t(
                "Test your knowledge and earn XP by answering questions correctly!",
                "‡§∏‡§π‡•Ä ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§ï‡§∞ ‡§Ö‡§™‡§®‡•á ‡§ú‡•ç‡§û‡§æ‡§® ‡§ï‡§æ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ XP ‡§Ö‡§∞‡•ç‡§ú‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç!",
                "‡∞∏‡∞∞‡±à‡∞® ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞æ‡∞≤‡±Å ‡∞á‡∞µ‡±ç‡∞µ‡∞°‡∞Ç ‡∞¶‡±ç‡∞µ‡∞æ‡∞∞‡∞æ ‡∞Æ‡±Ä ‡∞ú‡±ç‡∞û‡∞æ‡∞®‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞™‡∞∞‡±Ä‡∞ï‡±ç‡∞∑‡∞ø‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å XP ‡∞∏‡∞Ç‡∞™‡∞æ‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø!"
              )}
            </p>
          </div>

          {/* Quiz Selection Screen */}
          {!selectedQuiz && availableQuizzes.length > 0 && (
            <div className="bg-white rounded-xl p-8 shadow-sm border">
              <div className="text-center mb-8">
                <div className="text-6xl mb-6">üìö</div>
                <h2 className="text-2xl font-bold text-gray-800 mb-4">
                  {t("Choose a Quiz", "‡§è‡§ï ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§ö‡•Å‡§®‡•á‡§Ç", "‡∞í‡∞ï ‡∞ï‡±ç‡∞µ‡∞ø‡∞ú‡±ç ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø")}
                </h2>
                <p className="text-gray-600">
                  {t(
                    "Select any quiz created by your teacher to start learning!",
                    "‡§∏‡•Ä‡§ñ‡§®‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡§®‡•á ‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§¨‡§®‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§ö‡•Å‡§®‡•á‡§Ç!",
                    "‡∞®‡±á‡∞∞‡±ç‡∞ö‡±Å‡∞ï‡±ã‡∞µ‡∞°‡∞Ç ‡∞™‡±ç‡∞∞‡∞æ‡∞∞‡∞Ç‡∞≠‡∞ø‡∞Ç‡∞ö‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞Æ‡±Ä ‡∞ü‡±Ä‡∞ö‡∞∞‡±ç ‡∞∏‡±É‡∞∑‡±ç‡∞ü‡∞ø‡∞Ç‡∞ö‡∞ø‡∞® ‡∞è‡∞¶‡±à‡∞®‡∞æ ‡∞ï‡±ç‡∞µ‡∞ø‡∞ú‡±ç ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø!"
                  )}
                </p>
              </div>

              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                {availableQuizzes.map((quiz) => (
                  <div
                    key={quiz.id}
                    onClick={() => setSelectedQuiz(quiz)}
                    className="border-2 border-gray-200 rounded-xl p-6 hover:border-[#654321] hover:bg-[#FFF8F0] cursor-pointer transition-all group"
                  >
                    <div className="text-center">
                      <div className="text-3xl mb-3">üéØ</div>
                      <h3 className="font-bold text-lg text-gray-800 mb-2 group-hover:text-[#654321]">
                        {quiz.title}
                      </h3>
                      <p className="text-sm text-gray-600 mb-4 line-clamp-2">
                        {quiz.description}
                      </p>
                      
                      <div className="flex flex-wrap justify-center gap-2 text-xs">
                        <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-full">
                          {quiz.questions.length} {t("Questions", "‡§™‡•ç‡§∞‡§∂‡•ç‡§®", "‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞≤‡±Å")}
                        </span>
                        <span className="bg-green-100 text-green-800 px-2 py-1 rounded-full">
                          {t("Unit", "‡§á‡§ï‡§æ‡§à", "‡∞Ø‡±Ç‡∞®‡∞ø‡∞ü‡±ç")} {quiz.unitNumber}
                        </span>
                        <span className="bg-purple-100 text-purple-800 px-2 py-1 rounded-full">
                          {quiz.questions.length * 10} XP {t("max", "‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ", "‡∞ó‡∞∞‡∞ø‡∞∑‡±ç‡∞†‡∞Ç")}
                        </span>
                      </div>
                      
                      <div className="mt-4 text-xs text-gray-500">
                        {t("Created", "‡§¨‡§®‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ", "‡∞∏‡±É‡∞∑‡±ç‡∞ü‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø")}: {new Date(quiz.createdAt).toLocaleDateString()}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {!quizStarted && !showResults && selectedQuiz && (
            <div className="bg-white rounded-xl p-8 shadow-sm border">
              <div className="text-center">
                <div className="text-6xl mb-6">üéØ</div>
                <h2 className="text-2xl font-bold text-gray-800 mb-4">{selectedQuiz.title}</h2>
                <p className="text-gray-600 mb-6">{selectedQuiz.description}</p>
                
                <div className="flex justify-center gap-6 mb-8 text-sm">
                  <div className="bg-blue-100 text-blue-800 px-4 py-2 rounded-full">
                    {selectedQuiz.questions.length} {t("Questions", "‡§™‡•ç‡§∞‡§∂‡•ç‡§®", "‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞≤‡±Å")}
                  </div>
                  <div className="bg-green-100 text-green-800 px-4 py-2 rounded-full">
                    {t("Unit", "‡§á‡§ï‡§æ‡§à", "‡∞Ø‡±Ç‡∞®‡∞ø‡∞ü‡±ç")} {selectedQuiz.unitNumber}
                  </div>
                  <div className="bg-purple-100 text-purple-800 px-4 py-2 rounded-full">
                    10 XP {t("per correct answer", "‡§™‡•ç‡§∞‡§§‡§ø ‡§∏‡§π‡•Ä ‡§â‡§§‡•ç‡§§‡§∞", "‡∞™‡±ç‡∞∞‡∞§‡∞ø ‡∞∏‡∞∞‡±à‡∞® ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞æ‡∞®‡∞ø‡∞ï‡∞ø")}
                  </div>
                </div>
                
                <div className="flex gap-4 justify-center">
                  <button
                    onClick={() => setSelectedQuiz(null)}
                    className="bg-gray-500 text-white px-6 py-3 rounded-lg font-medium hover:bg-gray-600 transition-colors"
                  >
                    {t("‚Üê Back to Quizzes", "‚Üê ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏", "‚Üê ‡∞ï‡±ç‡∞µ‡∞ø‡∞ú‡±ç‚Äå‡∞≤‡∞ï‡±Å ‡∞§‡∞ø‡∞∞‡∞ø‡∞ó‡∞ø")}
                  </button>
                  <button
                    onClick={handleStartQuiz}
                    className="bg-[#654321] text-white px-8 py-3 rounded-lg font-bold text-lg hover:bg-[#543619] transition-colors"
                  >
                    {t("Start Quiz", "‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç", "‡∞ï‡±ç‡∞µ‡∞ø‡∞ú‡±ç ‡∞™‡±ç‡∞∞‡∞æ‡∞∞‡∞Ç‡∞≠‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø")}
                  </button>
                </div>
              </div>
            </div>
          )}

          {quizStarted && !showResults && selectedQuiz && selectedQuiz.questions[currentQuestionIndex] && (
            <div className="min-h-[70vh] flex flex-col items-center justify-center">
              <div className="bg-white/90 backdrop-blur-lg p-8 rounded-2xl shadow-xl w-full max-w-3xl flex flex-col gap-6 border border-gray-200">
                {/* Header with progress */}
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-4">
                    <span className="text-sm font-semibold text-gray-600 bg-gray-100 px-3 py-1 rounded-full">
                      {t("Question", "‡§™‡•ç‡§∞‡§∂‡•ç‡§®", "‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®")} {currentQuestionIndex + 1} {t("of", "‡§ï‡§æ", "‡∞≤‡±ã")} {selectedQuiz.questions.length}
                    </span>
                    <span className="text-sm text-gray-500">
                      {selectedQuiz.title}
                    </span>
                  </div>
                  <button
                    onClick={() => {
                      setQuizStarted(false);
                      setSelectedQuiz(null);
                      setCurrentQuestionIndex(0);
                      setSelectedAnswers([]);
                    }}
                    className="px-4 py-2 text-sm bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 transition-colors"
                  >
                    {t("Quit", "‡§õ‡•ã‡§°‡§º‡•á‡§Ç", "‡∞µ‡∞¶‡∞ø‡∞≤‡±á‡∞Ø‡∞Ç‡∞°‡∞ø")}
                  </button>
                </div>

                {/* Progress Bar */}
                <div className="w-full bg-gray-200 rounded-full h-3">
                  <div 
                    className="bg-gradient-to-r from-[#654321] to-[#8B5A2B] h-3 rounded-full transition-all duration-500 ease-out"
                    style={{ width: `${((currentQuestionIndex + 1) / selectedQuiz.questions.length) * 100}%` }}
                  />
                </div>
                
                {/* Question */}
                <h2 className="text-2xl font-bold text-gray-800 text-center leading-relaxed">
                  {selectedQuiz.questions[currentQuestionIndex].question}
                </h2>
                
                {/* Answer Options */}
                <div className="grid grid-cols-1 gap-4">
                  {selectedQuiz.questions[currentQuestionIndex].options.map((option, index) => {
                    const isSelected = selectedAnswers[currentQuestionIndex] === index;
                    
                    return (
                      <label key={index} className="cursor-pointer">
                        <div
                          onClick={() => handleAnswerSelect(index)}
                          className={`w-full text-left p-5 rounded-xl border-2 transition-all duration-200 transform hover:scale-[1.02] ${
                            isSelected
                              ? "border-[#654321] bg-[#FFF8F0] shadow-lg scale-[1.02]"
                              : "border-gray-200 bg-white hover:border-gray-300 hover:shadow-md"
                          }`}
                        >
                          <div className="flex items-center gap-4">
                            <input
                              type="radio"
                              name="quiz-answer"
                              value={index}
                              checked={isSelected}
                              onChange={() => handleAnswerSelect(index)}
                              className="w-5 h-5 text-[#654321] bg-gray-100 border-gray-300 focus:ring-[#654321] focus:ring-2"
                            />
                            <span className={`font-bold text-lg ${isSelected ? 'text-[#654321]' : 'text-gray-600'}`}>
                              {String.fromCharCode(65 + index)})
                            </span>
                            <span className={`text-lg ${isSelected ? 'text-[#654321] font-medium' : 'text-gray-700'}`}>
                              {option}
                            </span>
                          </div>
                        </div>
                      </label>
                    );
                  })}
                </div>
                
                {/* Navigation Buttons */}
                <div className="flex justify-between pt-4 border-t border-gray-200">
                  <button
                    onClick={handlePreviousQuestion}
                    disabled={currentQuestionIndex === 0}
                    className="px-6 py-3 rounded-xl border-2 border-gray-300 text-gray-600 font-medium hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                  >
                    ‚Üê {t("Previous", "‡§™‡§ø‡§õ‡§≤‡§æ", "‡∞Æ‡±Å‡∞®‡±Å‡∞™‡∞ü‡∞ø")}
                  </button>
                  
                  <button
                    onClick={handleNextQuestion}
                    disabled={selectedAnswers[currentQuestionIndex] === undefined || selectedAnswers[currentQuestionIndex] === -1}
                    className="px-8 py-3 rounded-xl bg-gradient-to-r from-[#654321] to-[#8B5A2B] text-white font-bold hover:from-[#543619] hover:to-[#6B4423] disabled:opacity-50 disabled:cursor-not-allowed transition-all transform hover:scale-105 shadow-lg"
                  >
                    {currentQuestionIndex === selectedQuiz.questions.length - 1 
                      ? t("Finish Quiz", "‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç", "‡∞ï‡±ç‡∞µ‡∞ø‡∞ú‡±ç ‡∞™‡±Ç‡∞∞‡±ç‡∞§‡∞ø ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø")
                      : t("Next", "‡§Ö‡§ó‡§≤‡§æ", "‡∞§‡∞¶‡±Å‡∞™‡∞∞‡∞ø") + " ‚Üí"
                    }
                  </button>
                </div>
              </div>
            </div>
          )}

          {showResults && selectedQuiz && (
            <div className="bg-white rounded-xl p-8 shadow-sm border">
              <div className="text-center">
                <div className="text-6xl mb-6">üéâ</div>
                <h2 className="text-2xl font-bold text-gray-800 mb-4">
                  {t("Quiz Completed!", "‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§™‡•Ç‡§∞‡•ç‡§£!", "‡∞ï‡±ç‡∞µ‡∞ø‡∞ú‡±ç ‡∞™‡±Ç‡∞∞‡±ç‡∞§‡∞Ø‡∞ø‡∞Ç‡∞¶‡∞ø!")}
                </h2>
                
                {(() => {
                  if (!selectedQuiz) return null;
                  
                  const correctAnswers = selectedAnswers.filter((answer, index) => 
                    answer !== undefined && 
                    answer !== -1 && 
                    selectedQuiz.questions[index] && 
                    answer === selectedQuiz.questions[index].correctAnswer
                  ).length;
                  const totalQuestions = selectedQuiz.questions.length;
                  const percentage = Math.round((correctAnswers / totalQuestions) * 100);
                  const xpEarned = correctAnswers * 10;
                  
                  return (
                    <>
                      <div className="mb-6">
                        <div className="text-4xl font-bold text-blue-600 mb-2">
                          {correctAnswers}/{totalQuestions}
                        </div>
                        <div className="text-lg text-gray-600 mb-4">
                          {percentage}% {t("Correct", "‡§∏‡§π‡•Ä", "‡∞∏‡∞∞‡±à‡∞®‡∞¶‡∞ø")}
                        </div>
                        {xpEarned > 0 && (
                          <div className="bg-yellow-100 text-yellow-800 px-4 py-2 rounded-full inline-block">
                            +{xpEarned} XP {t("Earned!", "‡§Ö‡§∞‡•ç‡§ú‡§ø‡§§!", "‡∞∏‡∞Ç‡∞™‡∞æ‡∞¶‡∞ø‡∞Ç‡∞ö‡∞æ‡∞∞‡±Å!")}
                          </div>
                        )}
                      </div>
                      
                      <div className="space-y-4 mb-8 text-left">
                        <h3 className="text-lg font-semibold text-center mb-4">
                          {t("Review Answers", "‡§â‡§§‡•ç‡§§‡§∞‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ", "‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞æ‡∞≤ ‡∞∏‡∞Æ‡±Ä‡∞ï‡±ç‡∞∑")}
                        </h3>
                        {selectedQuiz.questions.map((question, index) => {
                          const userAnswer = selectedAnswers[index];
                          const isCorrect = userAnswer !== undefined && userAnswer !== -1 && userAnswer === question.correctAnswer;
                          
                          return (
                            <div key={question.id} className="border rounded-lg p-4">
                              <div className="flex items-start gap-2 mb-2">
                                <span className={`text-lg ${isCorrect ? 'text-green-600' : 'text-red-600'}`}>
                                  {isCorrect ? '‚úÖ' : '‚ùå'}
                                </span>
                                <div className="flex-1">
                                  <div className="font-medium mb-2">{question.question}</div>
                                  <div className="text-sm text-gray-600 mb-2">
                                    <strong>{t("Your answer:", "‡§Ü‡§™‡§ï‡§æ ‡§â‡§§‡•ç‡§§‡§∞:", "‡∞Æ‡±Ä ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç:")}</strong> {userAnswer !== undefined && userAnswer !== -1 ? question.options[userAnswer] : t("No answer selected", "‡§ï‡•ã‡§à ‡§â‡§§‡•ç‡§§‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§ö‡•Å‡§®‡§æ ‡§ó‡§Ø‡§æ", "‡∞é‡∞ü‡±Å‡∞µ‡∞Ç‡∞ü‡∞ø ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞≤‡±á‡∞¶‡±Å")}
                                  </div>
                                  {!isCorrect && (
                                    <div className="text-sm text-green-600 mb-2">
                                      <strong>{t("Correct answer:", "‡§∏‡§π‡•Ä ‡§â‡§§‡•ç‡§§‡§∞:", "‡∞∏‡∞∞‡±à‡∞® ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç:")}</strong> {question.options[question.correctAnswer]}
                                    </div>
                                  )}
                                  <div className="text-sm text-gray-500">
                                    {question.explanation}
                                  </div>
                                </div>
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    </>
                  );
                })()}
                
                <div className="flex gap-3 justify-center flex-wrap">
                  <button
                    onClick={resetQuiz}
                    className="px-6 py-3 bg-gray-600 text-white rounded-lg font-medium hover:bg-gray-700 transition-colors"
                  >
                    {t("Take Again", "‡§´‡§ø‡§∞ ‡§∏‡•á ‡§≤‡•á‡§Ç", "‡∞Æ‡∞≥‡±ç‡∞≥‡±Ä ‡∞§‡±Ä‡∞∏‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø")}
                  </button>
                  <button
                    onClick={() => {
                      setSelectedQuiz(null);
                      setShowResults(false);
                      setQuizStarted(false);
                      setCurrentQuestionIndex(0);
                      setSelectedAnswers([]);
                    }}
                    className="px-6 py-3 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors"
                  >
                    {t("Try Another Quiz", "‡§¶‡•Ç‡§∏‡§∞‡§æ ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§ï‡§∞‡•á‡§Ç", "‡∞Æ‡∞∞‡±ä‡∞ï ‡∞ï‡±ç‡∞µ‡∞ø‡∞ú‡±ç ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø")}
                  </button>
                  <Link
                    href={isHindi ? "/hindi" : isTelugu ? "/telugu" : "/learn"}
                    className="px-6 py-3 bg-[#654321] text-white rounded-lg font-medium hover:bg-[#543619] transition-colors"
                  >
                    {t("Back to Learning", "‡§∏‡•Ä‡§ñ‡§®‡•á ‡§™‡§∞ ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Ç", "‡∞®‡±á‡∞∞‡±ç‡∞ö‡±Å‡∞ï‡±ã‡∞µ‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞§‡∞ø‡∞∞‡∞ø‡∞ó‡∞ø ‡∞µ‡±Ü‡∞≥‡±ç‡∞≥‡∞Ç‡∞°‡∞ø")}
                  </Link>
                </div>
              </div>
            </div>
          )}
        </div>
      </main>
      
      <RightBar />
      </div>
    </>
  );
}
